
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Doctor
 */

export type Doctor = {
  id: number
  firstName: string
  lastName: string
  specialty: string
}

/**
 * Model Patient
 */

export type Patient = {
  id: number
  firstName: string
  lastName: string
  dateOfBirth: Date
}

/**
 * Model Appointment
 */

export type Appointment = {
  id: number
  practiceName: string
  reason: string
  dateTime: Date
  patientId: number
}

/**
 * Model AppointmentsOnDoctors
 */

export type AppointmentsOnDoctors = {
  appointmentId: number
  doctorId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Doctors
 * const doctors = await prisma.doctor.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Doctors
   * const doctors = await prisma.doctor.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


      /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<GlobalReject>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<GlobalReject>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<GlobalReject>;

  /**
   * `prisma.appointmentsOnDoctors`: Exposes CRUD operations for the **AppointmentsOnDoctors** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppointmentsOnDoctors
    * const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.findMany()
    * ```
    */
  get appointmentsOnDoctors(): Prisma.AppointmentsOnDoctorsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.3.0
   * Query Engine version: 33838b0f78f1fe9052cf9a00e9761c9dc097a63c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Doctor: 'Doctor',
    Patient: 'Patient',
    Appointment: 'Appointment',
    AppointmentsOnDoctors: 'AppointmentsOnDoctors'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends boolean
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DoctorCountOutputType
   */


  export type DoctorCountOutputType = {
    appointments: number
  }

  export type DoctorCountOutputTypeSelect = {
    appointments?: boolean
  }

  export type DoctorCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DoctorCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DoctorCountOutputType
    : S extends undefined
    ? never
    : S extends DoctorCountOutputTypeArgs
    ?'include' extends U
    ? DoctorCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof DoctorCountOutputType ?DoctorCountOutputType [P]
  : 
     never
  } 
    : DoctorCountOutputType
  : DoctorCountOutputType




  // Custom InputTypes

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     * 
    **/
    select?: DoctorCountOutputTypeSelect | null
  }



  /**
   * Count Type PatientCountOutputType
   */


  export type PatientCountOutputType = {
    appointments: number
  }

  export type PatientCountOutputTypeSelect = {
    appointments?: boolean
  }

  export type PatientCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PatientCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PatientCountOutputType
    : S extends undefined
    ? never
    : S extends PatientCountOutputTypeArgs
    ?'include' extends U
    ? PatientCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof PatientCountOutputType ?PatientCountOutputType [P]
  : 
     never
  } 
    : PatientCountOutputType
  : PatientCountOutputType




  // Custom InputTypes

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     * 
    **/
    select?: PatientCountOutputTypeSelect | null
  }



  /**
   * Count Type AppointmentCountOutputType
   */


  export type AppointmentCountOutputType = {
    doctors: number
  }

  export type AppointmentCountOutputTypeSelect = {
    doctors?: boolean
  }

  export type AppointmentCountOutputTypeGetPayload<
    S extends boolean | null | undefined | AppointmentCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? AppointmentCountOutputType
    : S extends undefined
    ? never
    : S extends AppointmentCountOutputTypeArgs
    ?'include' extends U
    ? AppointmentCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof AppointmentCountOutputType ?AppointmentCountOutputType [P]
  : 
     never
  } 
    : AppointmentCountOutputType
  : AppointmentCountOutputType




  // Custom InputTypes

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     * 
    **/
    select?: AppointmentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Doctor
   */


  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    id: number | null
  }

  export type DoctorSumAggregateOutputType = {
    id: number | null
  }

  export type DoctorMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    specialty: string | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    specialty: string | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    specialty: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    id?: true
  }

  export type DoctorSumAggregateInputType = {
    id?: true
  }

  export type DoctorMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    specialty?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    specialty?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    specialty?: true
    _all?: true
  }

  export type DoctorAggregateArgs = {
    /**
     * Filter which Doctor to aggregate.
     * 
    **/
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }


    
    
  export type DoctorGroupByArgs = {
    where?: DoctorWhereInput
    orderBy?: Enumerable<DoctorOrderByWithAggregationInput>
    by: Array<DoctorScalarFieldEnum>
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }


  export type DoctorGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    specialty: string
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Promise<
    Array<
      PickArray<DoctorGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], DoctorGroupByOutputType[P]> 
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      > 
    >


  export type DoctorSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    specialty?: boolean
    appointments?: boolean | AppointmentsOnDoctorsFindManyArgs
    _count?: boolean | DoctorCountOutputTypeArgs
  }

  export type DoctorInclude = {
    appointments?: boolean | AppointmentsOnDoctorsFindManyArgs
    _count?: boolean | DoctorCountOutputTypeArgs
  }

  export type DoctorGetPayload<
    S extends boolean | null | undefined | DoctorArgs,
    U = keyof S
      > = S extends true
        ? Doctor
    : S extends undefined
    ? never
    : S extends DoctorArgs | DoctorFindManyArgs
    ?'include' extends U
    ? Doctor  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'appointments'
        ? Array < AppointmentsOnDoctorsGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? DoctorCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Doctor ?Doctor [P]
  : 
          P extends 'appointments'
        ? Array < AppointmentsOnDoctorsGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? DoctorCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Doctor
  : Doctor


  type DoctorCountArgs = Merge<
    Omit<DoctorFindManyArgs, 'select' | 'include'> & {
      select?: DoctorCountAggregateInputType | true
    }
  >

  export interface DoctorDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoctorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DoctorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Doctor'> extends True ? CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>> : CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoctorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DoctorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Doctor'> extends True ? CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>> : CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoctorFindManyArgs>(
      args?: SelectSubset<T, DoctorFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Doctor>>, PrismaPromise<Array<DoctorGetPayload<T>>>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
    **/
    create<T extends DoctorCreateArgs>(
      args: SelectSubset<T, DoctorCreateArgs>
    ): CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>>

    /**
     * Create many Doctors.
     *     @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     *     @example
     *     // Create many Doctors
     *     const doctor = await prisma.doctor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DoctorCreateManyArgs>(
      args?: SelectSubset<T, DoctorCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
    **/
    delete<T extends DoctorDeleteArgs>(
      args: SelectSubset<T, DoctorDeleteArgs>
    ): CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoctorUpdateArgs>(
      args: SelectSubset<T, DoctorUpdateArgs>
    ): CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoctorDeleteManyArgs>(
      args?: SelectSubset<T, DoctorDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoctorUpdateManyArgs>(
      args: SelectSubset<T, DoctorUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
    **/
    upsert<T extends DoctorUpsertArgs>(
      args: SelectSubset<T, DoctorUpsertArgs>
    ): CheckSelect<T, Prisma__DoctorClient<Doctor>, Prisma__DoctorClient<DoctorGetPayload<T>>>

    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DoctorClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appointments<T extends AppointmentsOnDoctorsFindManyArgs = {}>(args?: Subset<T, AppointmentsOnDoctorsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<AppointmentsOnDoctors>>, PrismaPromise<Array<AppointmentsOnDoctorsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Doctor findUnique
   */
  export type DoctorFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * Throw an Error if a Doctor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Doctor to fetch.
     * 
    **/
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor findFirst
   */
  export type DoctorFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * Throw an Error if a Doctor can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Doctor to fetch.
     * 
    **/
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     * 
    **/
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     * 
    **/
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }


  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * Filter, which Doctors to fetch.
     * 
    **/
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     * 
    **/
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     * 
    **/
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }


  /**
   * Doctor create
   */
  export type DoctorCreateArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * The data needed to create a Doctor.
     * 
    **/
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }


  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs = {
    data: Enumerable<DoctorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Doctor update
   */
  export type DoctorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * The data needed to update a Doctor.
     * 
    **/
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     * 
    **/
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs = {
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    where?: DoctorWhereInput
  }


  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     * 
    **/
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     * 
    **/
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }


  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
    /**
     * Filter which Doctor to delete.
     * 
    **/
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs = {
    where?: DoctorWhereInput
  }


  /**
   * Doctor without action
   */
  export type DoctorArgs = {
    /**
     * Select specific fields to fetch from the Doctor
     * 
    **/
    select?: DoctorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: DoctorInclude | null
  }



  /**
   * Model Patient
   */


  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    dateOfBirth: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    _all?: true
  }

  export type PatientAggregateArgs = {
    /**
     * Filter which Patient to aggregate.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }


    
    
  export type PatientGroupByArgs = {
    where?: PatientWhereInput
    orderBy?: Enumerable<PatientOrderByWithAggregationInput>
    by: Array<PatientScalarFieldEnum>
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }


  export type PatientGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    dateOfBirth: Date
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Promise<
    Array<
      PickArray<PatientGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], PatientGroupByOutputType[P]> 
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      > 
    >


  export type PatientSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    appointments?: boolean | AppointmentFindManyArgs
    _count?: boolean | PatientCountOutputTypeArgs
  }

  export type PatientInclude = {
    appointments?: boolean | AppointmentFindManyArgs
    _count?: boolean | PatientCountOutputTypeArgs
  }

  export type PatientGetPayload<
    S extends boolean | null | undefined | PatientArgs,
    U = keyof S
      > = S extends true
        ? Patient
    : S extends undefined
    ? never
    : S extends PatientArgs | PatientFindManyArgs
    ?'include' extends U
    ? Patient  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'appointments'
        ? Array < AppointmentGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? PatientCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Patient ?Patient [P]
  : 
          P extends 'appointments'
        ? Array < AppointmentGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? PatientCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Patient
  : Patient


  type PatientCountArgs = Merge<
    Omit<PatientFindManyArgs, 'select' | 'include'> & {
      select?: PatientCountAggregateInputType | true
    }
  >

  export interface PatientDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PatientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Patient'> extends True ? CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>> : CheckSelect<T, Prisma__PatientClient<Patient | null >, Prisma__PatientClient<PatientGetPayload<T> | null >>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PatientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Patient'> extends True ? CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>> : CheckSelect<T, Prisma__PatientClient<Patient | null >, Prisma__PatientClient<PatientGetPayload<T> | null >>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PatientFindManyArgs>(
      args?: SelectSubset<T, PatientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Patient>>, PrismaPromise<Array<PatientGetPayload<T>>>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends PatientCreateArgs>(
      args: SelectSubset<T, PatientCreateArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Create many Patients.
     *     @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     *     @example
     *     // Create many Patients
     *     const patient = await prisma.patient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientCreateManyArgs>(
      args?: SelectSubset<T, PatientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends PatientDeleteArgs>(
      args: SelectSubset<T, PatientDeleteArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientUpdateArgs>(
      args: SelectSubset<T, PatientUpdateArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientDeleteManyArgs>(
      args?: SelectSubset<T, PatientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientUpdateManyArgs>(
      args: SelectSubset<T, PatientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends PatientUpsertArgs>(
      args: SelectSubset<T, PatientUpsertArgs>
    ): CheckSelect<T, Prisma__PatientClient<Patient>, Prisma__PatientClient<PatientGetPayload<T>>>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PatientClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appointments<T extends AppointmentFindManyArgs = {}>(args?: Subset<T, AppointmentFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Appointment>>, PrismaPromise<Array<AppointmentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Throw an Error if a Patient can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Patient to fetch.
     * 
    **/
    where: PatientWhereUniqueInput
  }


  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Throw an Error if a Patient can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Patient to fetch.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     * 
    **/
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * Patient findMany
   */
  export type PatientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Filter, which Patients to fetch.
     * 
    **/
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     * 
    **/
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     * 
    **/
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * Patient create
   */
  export type PatientCreateArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The data needed to create a Patient.
     * 
    **/
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }


  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs = {
    data: Enumerable<PatientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Patient update
   */
  export type PatientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The data needed to update a Patient.
     * 
    **/
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     * 
    **/
    where: PatientWhereUniqueInput
  }


  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs = {
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    where?: PatientWhereInput
  }


  /**
   * Patient upsert
   */
  export type PatientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * The filter to search for the Patient to update in case it exists.
     * 
    **/
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     * 
    **/
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }


  /**
   * Patient delete
   */
  export type PatientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
    /**
     * Filter which Patient to delete.
     * 
    **/
    where: PatientWhereUniqueInput
  }


  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs = {
    where?: PatientWhereInput
  }


  /**
   * Patient without action
   */
  export type PatientArgs = {
    /**
     * Select specific fields to fetch from the Patient
     * 
    **/
    select?: PatientSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PatientInclude | null
  }



  /**
   * Model Appointment
   */


  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    id: number | null
    patientId: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: number | null
    practiceName: string | null
    reason: string | null
    dateTime: Date | null
    patientId: number | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: number | null
    practiceName: string | null
    reason: string | null
    dateTime: Date | null
    patientId: number | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    practiceName: number
    reason: number
    dateTime: number
    patientId: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    id?: true
    patientId?: true
  }

  export type AppointmentSumAggregateInputType = {
    id?: true
    patientId?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    practiceName?: true
    reason?: true
    dateTime?: true
    patientId?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    practiceName?: true
    reason?: true
    dateTime?: true
    patientId?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    practiceName?: true
    reason?: true
    dateTime?: true
    patientId?: true
    _all?: true
  }

  export type AppointmentAggregateArgs = {
    /**
     * Filter which Appointment to aggregate.
     * 
    **/
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }


    
    
  export type AppointmentGroupByArgs = {
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithAggregationInput>
    by: Array<AppointmentScalarFieldEnum>
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }


  export type AppointmentGroupByOutputType = {
    id: number
    practiceName: string
    reason: string
    dateTime: Date
    patientId: number
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Promise<
    Array<
      PickArray<AppointmentGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]> 
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      > 
    >


  export type AppointmentSelect = {
    id?: boolean
    practiceName?: boolean
    reason?: boolean
    dateTime?: boolean
    patient?: boolean | PatientArgs
    patientId?: boolean
    doctors?: boolean | AppointmentsOnDoctorsFindManyArgs
    _count?: boolean | AppointmentCountOutputTypeArgs
  }

  export type AppointmentInclude = {
    patient?: boolean | PatientArgs
    doctors?: boolean | AppointmentsOnDoctorsFindManyArgs
    _count?: boolean | AppointmentCountOutputTypeArgs
  }

  export type AppointmentGetPayload<
    S extends boolean | null | undefined | AppointmentArgs,
    U = keyof S
      > = S extends true
        ? Appointment
    : S extends undefined
    ? never
    : S extends AppointmentArgs | AppointmentFindManyArgs
    ?'include' extends U
    ? Appointment  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'patient'
        ? PatientGetPayload<S['include'][P]> :
        P extends 'doctors'
        ? Array < AppointmentsOnDoctorsGetPayload<S['include'][P]>>  :
        P extends '_count'
        ? AppointmentCountOutputTypeGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Appointment ?Appointment [P]
  : 
          P extends 'patient'
        ? PatientGetPayload<S['select'][P]> :
        P extends 'doctors'
        ? Array < AppointmentsOnDoctorsGetPayload<S['select'][P]>>  :
        P extends '_count'
        ? AppointmentCountOutputTypeGetPayload<S['select'][P]> | null : never
  } 
    : Appointment
  : Appointment


  type AppointmentCountArgs = Merge<
    Omit<AppointmentFindManyArgs, 'select' | 'include'> & {
      select?: AppointmentCountAggregateInputType | true
    }
  >

  export interface AppointmentDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppointmentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppointmentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Appointment'> extends True ? CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>> : CheckSelect<T, Prisma__AppointmentClient<Appointment | null >, Prisma__AppointmentClient<AppointmentGetPayload<T> | null >>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppointmentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppointmentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Appointment'> extends True ? CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>> : CheckSelect<T, Prisma__AppointmentClient<Appointment | null >, Prisma__AppointmentClient<AppointmentGetPayload<T> | null >>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppointmentFindManyArgs>(
      args?: SelectSubset<T, AppointmentFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Appointment>>, PrismaPromise<Array<AppointmentGetPayload<T>>>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
    **/
    create<T extends AppointmentCreateArgs>(
      args: SelectSubset<T, AppointmentCreateArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Create many Appointments.
     *     @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     *     @example
     *     // Create many Appointments
     *     const appointment = await prisma.appointment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppointmentCreateManyArgs>(
      args?: SelectSubset<T, AppointmentCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
    **/
    delete<T extends AppointmentDeleteArgs>(
      args: SelectSubset<T, AppointmentDeleteArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppointmentUpdateArgs>(
      args: SelectSubset<T, AppointmentUpdateArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppointmentDeleteManyArgs>(
      args?: SelectSubset<T, AppointmentDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppointmentUpdateManyArgs>(
      args: SelectSubset<T, AppointmentUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
    **/
    upsert<T extends AppointmentUpsertArgs>(
      args: SelectSubset<T, AppointmentUpsertArgs>
    ): CheckSelect<T, Prisma__AppointmentClient<Appointment>, Prisma__AppointmentClient<AppointmentGetPayload<T>>>

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppointmentClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    patient<T extends PatientArgs = {}>(args?: Subset<T, PatientArgs>): CheckSelect<T, Prisma__PatientClient<Patient | null >, Prisma__PatientClient<PatientGetPayload<T> | null >>;

    doctors<T extends AppointmentsOnDoctorsFindManyArgs = {}>(args?: Subset<T, AppointmentsOnDoctorsFindManyArgs>): CheckSelect<T, PrismaPromise<Array<AppointmentsOnDoctors>>, PrismaPromise<Array<AppointmentsOnDoctorsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Appointment findUnique
   */
  export type AppointmentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * Throw an Error if a Appointment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Appointment to fetch.
     * 
    **/
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment findFirst
   */
  export type AppointmentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * Throw an Error if a Appointment can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Appointment to fetch.
     * 
    **/
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     * 
    **/
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     * 
    **/
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * Filter, which Appointments to fetch.
     * 
    **/
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     * 
    **/
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Appointment create
   */
  export type AppointmentCreateArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * The data needed to create a Appointment.
     * 
    **/
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }


  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs = {
    data: Enumerable<AppointmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * The data needed to update a Appointment.
     * 
    **/
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     * 
    **/
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs = {
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    where?: AppointmentWhereInput
  }


  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     * 
    **/
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     * 
    **/
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }


  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
    /**
     * Filter which Appointment to delete.
     * 
    **/
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs = {
    where?: AppointmentWhereInput
  }


  /**
   * Appointment without action
   */
  export type AppointmentArgs = {
    /**
     * Select specific fields to fetch from the Appointment
     * 
    **/
    select?: AppointmentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentInclude | null
  }



  /**
   * Model AppointmentsOnDoctors
   */


  export type AggregateAppointmentsOnDoctors = {
    _count: AppointmentsOnDoctorsCountAggregateOutputType | null
    _avg: AppointmentsOnDoctorsAvgAggregateOutputType | null
    _sum: AppointmentsOnDoctorsSumAggregateOutputType | null
    _min: AppointmentsOnDoctorsMinAggregateOutputType | null
    _max: AppointmentsOnDoctorsMaxAggregateOutputType | null
  }

  export type AppointmentsOnDoctorsAvgAggregateOutputType = {
    appointmentId: number | null
    doctorId: number | null
  }

  export type AppointmentsOnDoctorsSumAggregateOutputType = {
    appointmentId: number | null
    doctorId: number | null
  }

  export type AppointmentsOnDoctorsMinAggregateOutputType = {
    appointmentId: number | null
    doctorId: number | null
  }

  export type AppointmentsOnDoctorsMaxAggregateOutputType = {
    appointmentId: number | null
    doctorId: number | null
  }

  export type AppointmentsOnDoctorsCountAggregateOutputType = {
    appointmentId: number
    doctorId: number
    _all: number
  }


  export type AppointmentsOnDoctorsAvgAggregateInputType = {
    appointmentId?: true
    doctorId?: true
  }

  export type AppointmentsOnDoctorsSumAggregateInputType = {
    appointmentId?: true
    doctorId?: true
  }

  export type AppointmentsOnDoctorsMinAggregateInputType = {
    appointmentId?: true
    doctorId?: true
  }

  export type AppointmentsOnDoctorsMaxAggregateInputType = {
    appointmentId?: true
    doctorId?: true
  }

  export type AppointmentsOnDoctorsCountAggregateInputType = {
    appointmentId?: true
    doctorId?: true
    _all?: true
  }

  export type AppointmentsOnDoctorsAggregateArgs = {
    /**
     * Filter which AppointmentsOnDoctors to aggregate.
     * 
    **/
    where?: AppointmentsOnDoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentsOnDoctors to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentsOnDoctorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AppointmentsOnDoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentsOnDoctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentsOnDoctors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppointmentsOnDoctors
    **/
    _count?: true | AppointmentsOnDoctorsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentsOnDoctorsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentsOnDoctorsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentsOnDoctorsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentsOnDoctorsMaxAggregateInputType
  }

  export type GetAppointmentsOnDoctorsAggregateType<T extends AppointmentsOnDoctorsAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointmentsOnDoctors]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointmentsOnDoctors[P]>
      : GetScalarType<T[P], AggregateAppointmentsOnDoctors[P]>
  }


    
    
  export type AppointmentsOnDoctorsGroupByArgs = {
    where?: AppointmentsOnDoctorsWhereInput
    orderBy?: Enumerable<AppointmentsOnDoctorsOrderByWithAggregationInput>
    by: Array<AppointmentsOnDoctorsScalarFieldEnum>
    having?: AppointmentsOnDoctorsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentsOnDoctorsCountAggregateInputType | true
    _avg?: AppointmentsOnDoctorsAvgAggregateInputType
    _sum?: AppointmentsOnDoctorsSumAggregateInputType
    _min?: AppointmentsOnDoctorsMinAggregateInputType
    _max?: AppointmentsOnDoctorsMaxAggregateInputType
  }


  export type AppointmentsOnDoctorsGroupByOutputType = {
    appointmentId: number
    doctorId: number
    _count: AppointmentsOnDoctorsCountAggregateOutputType | null
    _avg: AppointmentsOnDoctorsAvgAggregateOutputType | null
    _sum: AppointmentsOnDoctorsSumAggregateOutputType | null
    _min: AppointmentsOnDoctorsMinAggregateOutputType | null
    _max: AppointmentsOnDoctorsMaxAggregateOutputType | null
  }

  type GetAppointmentsOnDoctorsGroupByPayload<T extends AppointmentsOnDoctorsGroupByArgs> = Promise<
    Array<
      PickArray<AppointmentsOnDoctorsGroupByOutputType, T['by']> & 
        {
          [P in ((keyof T) & (keyof AppointmentsOnDoctorsGroupByOutputType))]: P extends '_count' 
            ? T[P] extends boolean 
              ? number 
              : GetScalarType<T[P], AppointmentsOnDoctorsGroupByOutputType[P]> 
            : GetScalarType<T[P], AppointmentsOnDoctorsGroupByOutputType[P]>
        }
      > 
    >


  export type AppointmentsOnDoctorsSelect = {
    appointment?: boolean | AppointmentArgs
    appointmentId?: boolean
    doctor?: boolean | DoctorArgs
    doctorId?: boolean
  }

  export type AppointmentsOnDoctorsInclude = {
    appointment?: boolean | AppointmentArgs
    doctor?: boolean | DoctorArgs
  }

  export type AppointmentsOnDoctorsGetPayload<
    S extends boolean | null | undefined | AppointmentsOnDoctorsArgs,
    U = keyof S
      > = S extends true
        ? AppointmentsOnDoctors
    : S extends undefined
    ? never
    : S extends AppointmentsOnDoctorsArgs | AppointmentsOnDoctorsFindManyArgs
    ?'include' extends U
    ? AppointmentsOnDoctors  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'appointment'
        ? AppointmentGetPayload<S['include'][P]> :
        P extends 'doctor'
        ? DoctorGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof AppointmentsOnDoctors ?AppointmentsOnDoctors [P]
  : 
          P extends 'appointment'
        ? AppointmentGetPayload<S['select'][P]> :
        P extends 'doctor'
        ? DoctorGetPayload<S['select'][P]> : never
  } 
    : AppointmentsOnDoctors
  : AppointmentsOnDoctors


  type AppointmentsOnDoctorsCountArgs = Merge<
    Omit<AppointmentsOnDoctorsFindManyArgs, 'select' | 'include'> & {
      select?: AppointmentsOnDoctorsCountAggregateInputType | true
    }
  >

  export interface AppointmentsOnDoctorsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one AppointmentsOnDoctors that matches the filter.
     * @param {AppointmentsOnDoctorsFindUniqueArgs} args - Arguments to find a AppointmentsOnDoctors
     * @example
     * // Get one AppointmentsOnDoctors
     * const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppointmentsOnDoctorsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppointmentsOnDoctorsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AppointmentsOnDoctors'> extends True ? CheckSelect<T, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctors>, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctorsGetPayload<T>>> : CheckSelect<T, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctors | null >, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctorsGetPayload<T> | null >>

    /**
     * Find the first AppointmentsOnDoctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsOnDoctorsFindFirstArgs} args - Arguments to find a AppointmentsOnDoctors
     * @example
     * // Get one AppointmentsOnDoctors
     * const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppointmentsOnDoctorsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppointmentsOnDoctorsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AppointmentsOnDoctors'> extends True ? CheckSelect<T, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctors>, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctorsGetPayload<T>>> : CheckSelect<T, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctors | null >, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctorsGetPayload<T> | null >>

    /**
     * Find zero or more AppointmentsOnDoctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsOnDoctorsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppointmentsOnDoctors
     * const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.findMany()
     * 
     * // Get first 10 AppointmentsOnDoctors
     * const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.findMany({ take: 10 })
     * 
     * // Only select the `appointmentId`
     * const appointmentsOnDoctorsWithAppointmentIdOnly = await prisma.appointmentsOnDoctors.findMany({ select: { appointmentId: true } })
     * 
    **/
    findMany<T extends AppointmentsOnDoctorsFindManyArgs>(
      args?: SelectSubset<T, AppointmentsOnDoctorsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<AppointmentsOnDoctors>>, PrismaPromise<Array<AppointmentsOnDoctorsGetPayload<T>>>>

    /**
     * Create a AppointmentsOnDoctors.
     * @param {AppointmentsOnDoctorsCreateArgs} args - Arguments to create a AppointmentsOnDoctors.
     * @example
     * // Create one AppointmentsOnDoctors
     * const AppointmentsOnDoctors = await prisma.appointmentsOnDoctors.create({
     *   data: {
     *     // ... data to create a AppointmentsOnDoctors
     *   }
     * })
     * 
    **/
    create<T extends AppointmentsOnDoctorsCreateArgs>(
      args: SelectSubset<T, AppointmentsOnDoctorsCreateArgs>
    ): CheckSelect<T, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctors>, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctorsGetPayload<T>>>

    /**
     * Create many AppointmentsOnDoctors.
     *     @param {AppointmentsOnDoctorsCreateManyArgs} args - Arguments to create many AppointmentsOnDoctors.
     *     @example
     *     // Create many AppointmentsOnDoctors
     *     const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppointmentsOnDoctorsCreateManyArgs>(
      args?: SelectSubset<T, AppointmentsOnDoctorsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a AppointmentsOnDoctors.
     * @param {AppointmentsOnDoctorsDeleteArgs} args - Arguments to delete one AppointmentsOnDoctors.
     * @example
     * // Delete one AppointmentsOnDoctors
     * const AppointmentsOnDoctors = await prisma.appointmentsOnDoctors.delete({
     *   where: {
     *     // ... filter to delete one AppointmentsOnDoctors
     *   }
     * })
     * 
    **/
    delete<T extends AppointmentsOnDoctorsDeleteArgs>(
      args: SelectSubset<T, AppointmentsOnDoctorsDeleteArgs>
    ): CheckSelect<T, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctors>, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctorsGetPayload<T>>>

    /**
     * Update one AppointmentsOnDoctors.
     * @param {AppointmentsOnDoctorsUpdateArgs} args - Arguments to update one AppointmentsOnDoctors.
     * @example
     * // Update one AppointmentsOnDoctors
     * const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppointmentsOnDoctorsUpdateArgs>(
      args: SelectSubset<T, AppointmentsOnDoctorsUpdateArgs>
    ): CheckSelect<T, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctors>, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctorsGetPayload<T>>>

    /**
     * Delete zero or more AppointmentsOnDoctors.
     * @param {AppointmentsOnDoctorsDeleteManyArgs} args - Arguments to filter AppointmentsOnDoctors to delete.
     * @example
     * // Delete a few AppointmentsOnDoctors
     * const { count } = await prisma.appointmentsOnDoctors.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppointmentsOnDoctorsDeleteManyArgs>(
      args?: SelectSubset<T, AppointmentsOnDoctorsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppointmentsOnDoctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsOnDoctorsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppointmentsOnDoctors
     * const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppointmentsOnDoctorsUpdateManyArgs>(
      args: SelectSubset<T, AppointmentsOnDoctorsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one AppointmentsOnDoctors.
     * @param {AppointmentsOnDoctorsUpsertArgs} args - Arguments to update or create a AppointmentsOnDoctors.
     * @example
     * // Update or create a AppointmentsOnDoctors
     * const appointmentsOnDoctors = await prisma.appointmentsOnDoctors.upsert({
     *   create: {
     *     // ... data to create a AppointmentsOnDoctors
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppointmentsOnDoctors we want to update
     *   }
     * })
    **/
    upsert<T extends AppointmentsOnDoctorsUpsertArgs>(
      args: SelectSubset<T, AppointmentsOnDoctorsUpsertArgs>
    ): CheckSelect<T, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctors>, Prisma__AppointmentsOnDoctorsClient<AppointmentsOnDoctorsGetPayload<T>>>

    /**
     * Count the number of AppointmentsOnDoctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsOnDoctorsCountArgs} args - Arguments to filter AppointmentsOnDoctors to count.
     * @example
     * // Count the number of AppointmentsOnDoctors
     * const count = await prisma.appointmentsOnDoctors.count({
     *   where: {
     *     // ... the filter for the AppointmentsOnDoctors we want to count
     *   }
     * })
    **/
    count<T extends AppointmentsOnDoctorsCountArgs>(
      args?: Subset<T, AppointmentsOnDoctorsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentsOnDoctorsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppointmentsOnDoctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsOnDoctorsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentsOnDoctorsAggregateArgs>(args: Subset<T, AppointmentsOnDoctorsAggregateArgs>): PrismaPromise<GetAppointmentsOnDoctorsAggregateType<T>>

    /**
     * Group by AppointmentsOnDoctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentsOnDoctorsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentsOnDoctorsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentsOnDoctorsGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentsOnDoctorsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentsOnDoctorsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentsOnDoctorsGroupByPayload<T> : Promise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for AppointmentsOnDoctors.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppointmentsOnDoctorsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appointment<T extends AppointmentArgs = {}>(args?: Subset<T, AppointmentArgs>): CheckSelect<T, Prisma__AppointmentClient<Appointment | null >, Prisma__AppointmentClient<AppointmentGetPayload<T> | null >>;

    doctor<T extends DoctorArgs = {}>(args?: Subset<T, DoctorArgs>): CheckSelect<T, Prisma__DoctorClient<Doctor | null >, Prisma__DoctorClient<DoctorGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * AppointmentsOnDoctors findUnique
   */
  export type AppointmentsOnDoctorsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsOnDoctors
     * 
    **/
    select?: AppointmentsOnDoctorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentsOnDoctorsInclude | null
    /**
     * Throw an Error if a AppointmentsOnDoctors can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which AppointmentsOnDoctors to fetch.
     * 
    **/
    where: AppointmentsOnDoctorsWhereUniqueInput
  }


  /**
   * AppointmentsOnDoctors findFirst
   */
  export type AppointmentsOnDoctorsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsOnDoctors
     * 
    **/
    select?: AppointmentsOnDoctorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentsOnDoctorsInclude | null
    /**
     * Throw an Error if a AppointmentsOnDoctors can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which AppointmentsOnDoctors to fetch.
     * 
    **/
    where?: AppointmentsOnDoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentsOnDoctors to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentsOnDoctorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppointmentsOnDoctors.
     * 
    **/
    cursor?: AppointmentsOnDoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentsOnDoctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentsOnDoctors.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppointmentsOnDoctors.
     * 
    **/
    distinct?: Enumerable<AppointmentsOnDoctorsScalarFieldEnum>
  }


  /**
   * AppointmentsOnDoctors findMany
   */
  export type AppointmentsOnDoctorsFindManyArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsOnDoctors
     * 
    **/
    select?: AppointmentsOnDoctorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentsOnDoctorsInclude | null
    /**
     * Filter, which AppointmentsOnDoctors to fetch.
     * 
    **/
    where?: AppointmentsOnDoctorsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppointmentsOnDoctors to fetch.
     * 
    **/
    orderBy?: Enumerable<AppointmentsOnDoctorsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppointmentsOnDoctors.
     * 
    **/
    cursor?: AppointmentsOnDoctorsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppointmentsOnDoctors from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppointmentsOnDoctors.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AppointmentsOnDoctorsScalarFieldEnum>
  }


  /**
   * AppointmentsOnDoctors create
   */
  export type AppointmentsOnDoctorsCreateArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsOnDoctors
     * 
    **/
    select?: AppointmentsOnDoctorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentsOnDoctorsInclude | null
    /**
     * The data needed to create a AppointmentsOnDoctors.
     * 
    **/
    data: XOR<AppointmentsOnDoctorsCreateInput, AppointmentsOnDoctorsUncheckedCreateInput>
  }


  /**
   * AppointmentsOnDoctors createMany
   */
  export type AppointmentsOnDoctorsCreateManyArgs = {
    data: Enumerable<AppointmentsOnDoctorsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AppointmentsOnDoctors update
   */
  export type AppointmentsOnDoctorsUpdateArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsOnDoctors
     * 
    **/
    select?: AppointmentsOnDoctorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentsOnDoctorsInclude | null
    /**
     * The data needed to update a AppointmentsOnDoctors.
     * 
    **/
    data: XOR<AppointmentsOnDoctorsUpdateInput, AppointmentsOnDoctorsUncheckedUpdateInput>
    /**
     * Choose, which AppointmentsOnDoctors to update.
     * 
    **/
    where: AppointmentsOnDoctorsWhereUniqueInput
  }


  /**
   * AppointmentsOnDoctors updateMany
   */
  export type AppointmentsOnDoctorsUpdateManyArgs = {
    data: XOR<AppointmentsOnDoctorsUpdateManyMutationInput, AppointmentsOnDoctorsUncheckedUpdateManyInput>
    where?: AppointmentsOnDoctorsWhereInput
  }


  /**
   * AppointmentsOnDoctors upsert
   */
  export type AppointmentsOnDoctorsUpsertArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsOnDoctors
     * 
    **/
    select?: AppointmentsOnDoctorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentsOnDoctorsInclude | null
    /**
     * The filter to search for the AppointmentsOnDoctors to update in case it exists.
     * 
    **/
    where: AppointmentsOnDoctorsWhereUniqueInput
    /**
     * In case the AppointmentsOnDoctors found by the `where` argument doesn't exist, create a new AppointmentsOnDoctors with this data.
     * 
    **/
    create: XOR<AppointmentsOnDoctorsCreateInput, AppointmentsOnDoctorsUncheckedCreateInput>
    /**
     * In case the AppointmentsOnDoctors was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AppointmentsOnDoctorsUpdateInput, AppointmentsOnDoctorsUncheckedUpdateInput>
  }


  /**
   * AppointmentsOnDoctors delete
   */
  export type AppointmentsOnDoctorsDeleteArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsOnDoctors
     * 
    **/
    select?: AppointmentsOnDoctorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentsOnDoctorsInclude | null
    /**
     * Filter which AppointmentsOnDoctors to delete.
     * 
    **/
    where: AppointmentsOnDoctorsWhereUniqueInput
  }


  /**
   * AppointmentsOnDoctors deleteMany
   */
  export type AppointmentsOnDoctorsDeleteManyArgs = {
    where?: AppointmentsOnDoctorsWhereInput
  }


  /**
   * AppointmentsOnDoctors without action
   */
  export type AppointmentsOnDoctorsArgs = {
    /**
     * Select specific fields to fetch from the AppointmentsOnDoctors
     * 
    **/
    select?: AppointmentsOnDoctorsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AppointmentsOnDoctorsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const DoctorScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    specialty: 'specialty'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    practiceName: 'practiceName',
    reason: 'reason',
    dateTime: 'dateTime',
    patientId: 'patientId'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const AppointmentsOnDoctorsScalarFieldEnum: {
    appointmentId: 'appointmentId',
    doctorId: 'doctorId'
  };

  export type AppointmentsOnDoctorsScalarFieldEnum = (typeof AppointmentsOnDoctorsScalarFieldEnum)[keyof typeof AppointmentsOnDoctorsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type DoctorWhereInput = {
    AND?: Enumerable<DoctorWhereInput>
    OR?: Enumerable<DoctorWhereInput>
    NOT?: Enumerable<DoctorWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    specialty?: StringFilter | string
    appointments?: AppointmentsOnDoctorsListRelationFilter
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    specialty?: SortOrder
    appointments?: AppointmentsOnDoctorsOrderByRelationAggregateInput
  }

  export type DoctorWhereUniqueInput = {
    id?: number
  }

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    specialty?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _avg?: DoctorAvgOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
    _sum?: DoctorSumOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    OR?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    specialty?: StringWithAggregatesFilter | string
  }

  export type PatientWhereInput = {
    AND?: Enumerable<PatientWhereInput>
    OR?: Enumerable<PatientWhereInput>
    NOT?: Enumerable<PatientWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    dateOfBirth?: DateTimeFilter | Date | string
    appointments?: AppointmentListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    appointments?: AppointmentOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = {
    id?: number
  }

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PatientScalarWhereWithAggregatesInput>
    OR?: Enumerable<PatientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PatientScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    dateOfBirth?: DateTimeWithAggregatesFilter | Date | string
  }

  export type AppointmentWhereInput = {
    AND?: Enumerable<AppointmentWhereInput>
    OR?: Enumerable<AppointmentWhereInput>
    NOT?: Enumerable<AppointmentWhereInput>
    id?: IntFilter | number
    practiceName?: StringFilter | string
    reason?: StringFilter | string
    dateTime?: DateTimeFilter | Date | string
    patient?: XOR<PatientRelationFilter, PatientWhereInput>
    patientId?: IntFilter | number
    doctors?: AppointmentsOnDoctorsListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    practiceName?: SortOrder
    reason?: SortOrder
    dateTime?: SortOrder
    patient?: PatientOrderByWithRelationInput
    patientId?: SortOrder
    doctors?: AppointmentsOnDoctorsOrderByRelationAggregateInput
  }

  export type AppointmentWhereUniqueInput = {
    id?: number
  }

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    practiceName?: SortOrder
    reason?: SortOrder
    dateTime?: SortOrder
    patientId?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    practiceName?: StringWithAggregatesFilter | string
    reason?: StringWithAggregatesFilter | string
    dateTime?: DateTimeWithAggregatesFilter | Date | string
    patientId?: IntWithAggregatesFilter | number
  }

  export type AppointmentsOnDoctorsWhereInput = {
    AND?: Enumerable<AppointmentsOnDoctorsWhereInput>
    OR?: Enumerable<AppointmentsOnDoctorsWhereInput>
    NOT?: Enumerable<AppointmentsOnDoctorsWhereInput>
    appointment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
    appointmentId?: IntFilter | number
    doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    doctorId?: IntFilter | number
  }

  export type AppointmentsOnDoctorsOrderByWithRelationInput = {
    appointment?: AppointmentOrderByWithRelationInput
    appointmentId?: SortOrder
    doctor?: DoctorOrderByWithRelationInput
    doctorId?: SortOrder
  }

  export type AppointmentsOnDoctorsWhereUniqueInput = {
    appointmentId_doctorId?: AppointmentsOnDoctorsAppointmentIdDoctorIdCompoundUniqueInput
  }

  export type AppointmentsOnDoctorsOrderByWithAggregationInput = {
    appointmentId?: SortOrder
    doctorId?: SortOrder
    _count?: AppointmentsOnDoctorsCountOrderByAggregateInput
    _avg?: AppointmentsOnDoctorsAvgOrderByAggregateInput
    _max?: AppointmentsOnDoctorsMaxOrderByAggregateInput
    _min?: AppointmentsOnDoctorsMinOrderByAggregateInput
    _sum?: AppointmentsOnDoctorsSumOrderByAggregateInput
  }

  export type AppointmentsOnDoctorsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppointmentsOnDoctorsScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppointmentsOnDoctorsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppointmentsOnDoctorsScalarWhereWithAggregatesInput>
    appointmentId?: IntWithAggregatesFilter | number
    doctorId?: IntWithAggregatesFilter | number
  }

  export type DoctorCreateInput = {
    firstName: string
    lastName: string
    specialty: string
    appointments?: AppointmentsOnDoctorsCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    specialty: string
    appointments?: AppointmentsOnDoctorsUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    appointments?: AppointmentsOnDoctorsUpdateManyWithoutDoctorInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
    appointments?: AppointmentsOnDoctorsUncheckedUpdateManyWithoutDoctorInput
  }

  export type DoctorCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    specialty: string
  }

  export type DoctorUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type PatientCreateInput = {
    firstName: string
    lastName: string
    dateOfBirth: Date | string
    appointments?: AppointmentCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    dateOfBirth: Date | string
    appointments?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUpdateManyWithoutPatientInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
    appointments?: AppointmentUncheckedUpdateManyWithoutPatientInput
  }

  export type PatientCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    dateOfBirth: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentCreateInput = {
    practiceName: string
    reason: string
    dateTime: Date | string
    patient: PatientCreateNestedOneWithoutAppointmentsInput
    doctors?: AppointmentsOnDoctorsCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: number
    practiceName: string
    reason: string
    dateTime: Date | string
    patientId: number
    doctors?: AppointmentsOnDoctorsUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAppointmentsInput
    doctors?: AppointmentsOnDoctorsUpdateManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    doctors?: AppointmentsOnDoctorsUncheckedUpdateManyWithoutAppointmentInput
  }

  export type AppointmentCreateManyInput = {
    id?: number
    practiceName: string
    reason: string
    dateTime: Date | string
    patientId: number
  }

  export type AppointmentUpdateManyMutationInput = {
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsOnDoctorsCreateInput = {
    appointment: AppointmentCreateNestedOneWithoutDoctorsInput
    doctor: DoctorCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentsOnDoctorsUncheckedCreateInput = {
    appointmentId: number
    doctorId: number
  }

  export type AppointmentsOnDoctorsUpdateInput = {
    appointment?: AppointmentUpdateOneRequiredWithoutDoctorsInput
    doctor?: DoctorUpdateOneRequiredWithoutAppointmentsInput
  }

  export type AppointmentsOnDoctorsUncheckedUpdateInput = {
    appointmentId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsOnDoctorsCreateManyInput = {
    appointmentId: number
    doctorId: number
  }

  export type AppointmentsOnDoctorsUpdateManyMutationInput = {

  }

  export type AppointmentsOnDoctorsUncheckedUpdateManyInput = {
    appointmentId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type AppointmentsOnDoctorsListRelationFilter = {
    every?: AppointmentsOnDoctorsWhereInput
    some?: AppointmentsOnDoctorsWhereInput
    none?: AppointmentsOnDoctorsWhereInput
  }

  export type AppointmentsOnDoctorsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    specialty?: SortOrder
  }

  export type DoctorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    specialty?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    specialty?: SortOrder
  }

  export type DoctorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    practiceName?: SortOrder
    reason?: SortOrder
    dateTime?: SortOrder
    patientId?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    practiceName?: SortOrder
    reason?: SortOrder
    dateTime?: SortOrder
    patientId?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    practiceName?: SortOrder
    reason?: SortOrder
    dateTime?: SortOrder
    patientId?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
  }

  export type AppointmentRelationFilter = {
    is?: AppointmentWhereInput
    isNot?: AppointmentWhereInput
  }

  export type DoctorRelationFilter = {
    is?: DoctorWhereInput
    isNot?: DoctorWhereInput
  }

  export type AppointmentsOnDoctorsAppointmentIdDoctorIdCompoundUniqueInput = {
    appointmentId: number
    doctorId: number
  }

  export type AppointmentsOnDoctorsCountOrderByAggregateInput = {
    appointmentId?: SortOrder
    doctorId?: SortOrder
  }

  export type AppointmentsOnDoctorsAvgOrderByAggregateInput = {
    appointmentId?: SortOrder
    doctorId?: SortOrder
  }

  export type AppointmentsOnDoctorsMaxOrderByAggregateInput = {
    appointmentId?: SortOrder
    doctorId?: SortOrder
  }

  export type AppointmentsOnDoctorsMinOrderByAggregateInput = {
    appointmentId?: SortOrder
    doctorId?: SortOrder
  }

  export type AppointmentsOnDoctorsSumOrderByAggregateInput = {
    appointmentId?: SortOrder
    doctorId?: SortOrder
  }

  export type AppointmentsOnDoctorsCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<AppointmentsOnDoctorsCreateWithoutDoctorInput>, Enumerable<AppointmentsOnDoctorsUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<AppointmentsOnDoctorsCreateOrConnectWithoutDoctorInput>
    createMany?: AppointmentsOnDoctorsCreateManyDoctorInputEnvelope
    connect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
  }

  export type AppointmentsOnDoctorsUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<AppointmentsOnDoctorsCreateWithoutDoctorInput>, Enumerable<AppointmentsOnDoctorsUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<AppointmentsOnDoctorsCreateOrConnectWithoutDoctorInput>
    createMany?: AppointmentsOnDoctorsCreateManyDoctorInputEnvelope
    connect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type AppointmentsOnDoctorsUpdateManyWithoutDoctorInput = {
    create?: XOR<Enumerable<AppointmentsOnDoctorsCreateWithoutDoctorInput>, Enumerable<AppointmentsOnDoctorsUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<AppointmentsOnDoctorsCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<AppointmentsOnDoctorsUpsertWithWhereUniqueWithoutDoctorInput>
    createMany?: AppointmentsOnDoctorsCreateManyDoctorInputEnvelope
    connect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    set?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    disconnect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    delete?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    update?: Enumerable<AppointmentsOnDoctorsUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<AppointmentsOnDoctorsUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<AppointmentsOnDoctorsScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AppointmentsOnDoctorsUncheckedUpdateManyWithoutDoctorInput = {
    create?: XOR<Enumerable<AppointmentsOnDoctorsCreateWithoutDoctorInput>, Enumerable<AppointmentsOnDoctorsUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<AppointmentsOnDoctorsCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<AppointmentsOnDoctorsUpsertWithWhereUniqueWithoutDoctorInput>
    createMany?: AppointmentsOnDoctorsCreateManyDoctorInputEnvelope
    connect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    set?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    disconnect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    delete?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    update?: Enumerable<AppointmentsOnDoctorsUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<AppointmentsOnDoctorsUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<AppointmentsOnDoctorsScalarWhereInput>
  }

  export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AppointmentUpdateManyWithoutPatientInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type PatientCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
  }

  export type AppointmentsOnDoctorsCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<AppointmentsOnDoctorsCreateWithoutAppointmentInput>, Enumerable<AppointmentsOnDoctorsUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<AppointmentsOnDoctorsCreateOrConnectWithoutAppointmentInput>
    createMany?: AppointmentsOnDoctorsCreateManyAppointmentInputEnvelope
    connect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
  }

  export type AppointmentsOnDoctorsUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<AppointmentsOnDoctorsCreateWithoutAppointmentInput>, Enumerable<AppointmentsOnDoctorsUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<AppointmentsOnDoctorsCreateOrConnectWithoutAppointmentInput>
    createMany?: AppointmentsOnDoctorsCreateManyAppointmentInputEnvelope
    connect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
  }

  export type PatientUpdateOneRequiredWithoutAppointmentsInput = {
    create?: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentsInput
    upsert?: PatientUpsertWithoutAppointmentsInput
    connect?: PatientWhereUniqueInput
    update?: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
  }

  export type AppointmentsOnDoctorsUpdateManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<AppointmentsOnDoctorsCreateWithoutAppointmentInput>, Enumerable<AppointmentsOnDoctorsUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<AppointmentsOnDoctorsCreateOrConnectWithoutAppointmentInput>
    upsert?: Enumerable<AppointmentsOnDoctorsUpsertWithWhereUniqueWithoutAppointmentInput>
    createMany?: AppointmentsOnDoctorsCreateManyAppointmentInputEnvelope
    connect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    set?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    disconnect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    delete?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    update?: Enumerable<AppointmentsOnDoctorsUpdateWithWhereUniqueWithoutAppointmentInput>
    updateMany?: Enumerable<AppointmentsOnDoctorsUpdateManyWithWhereWithoutAppointmentInput>
    deleteMany?: Enumerable<AppointmentsOnDoctorsScalarWhereInput>
  }

  export type AppointmentsOnDoctorsUncheckedUpdateManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<AppointmentsOnDoctorsCreateWithoutAppointmentInput>, Enumerable<AppointmentsOnDoctorsUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<AppointmentsOnDoctorsCreateOrConnectWithoutAppointmentInput>
    upsert?: Enumerable<AppointmentsOnDoctorsUpsertWithWhereUniqueWithoutAppointmentInput>
    createMany?: AppointmentsOnDoctorsCreateManyAppointmentInputEnvelope
    connect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    set?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    disconnect?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    delete?: Enumerable<AppointmentsOnDoctorsWhereUniqueInput>
    update?: Enumerable<AppointmentsOnDoctorsUpdateWithWhereUniqueWithoutAppointmentInput>
    updateMany?: Enumerable<AppointmentsOnDoctorsUpdateManyWithWhereWithoutAppointmentInput>
    deleteMany?: Enumerable<AppointmentsOnDoctorsScalarWhereInput>
  }

  export type AppointmentCreateNestedOneWithoutDoctorsInput = {
    create?: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorsInput
    connect?: AppointmentWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutAppointmentsInput = {
    create?: XOR<DoctorCreateWithoutAppointmentsInput, DoctorUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAppointmentsInput
    connect?: DoctorWhereUniqueInput
  }

  export type AppointmentUpdateOneRequiredWithoutDoctorsInput = {
    create?: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutDoctorsInput
    upsert?: AppointmentUpsertWithoutDoctorsInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<AppointmentUpdateWithoutDoctorsInput, AppointmentUncheckedUpdateWithoutDoctorsInput>
  }

  export type DoctorUpdateOneRequiredWithoutAppointmentsInput = {
    create?: XOR<DoctorCreateWithoutAppointmentsInput, DoctorUncheckedCreateWithoutAppointmentsInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAppointmentsInput
    upsert?: DoctorUpsertWithoutAppointmentsInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutAppointmentsInput, DoctorUncheckedUpdateWithoutAppointmentsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type AppointmentsOnDoctorsCreateWithoutDoctorInput = {
    appointment: AppointmentCreateNestedOneWithoutDoctorsInput
  }

  export type AppointmentsOnDoctorsUncheckedCreateWithoutDoctorInput = {
    appointmentId: number
  }

  export type AppointmentsOnDoctorsCreateOrConnectWithoutDoctorInput = {
    where: AppointmentsOnDoctorsWhereUniqueInput
    create: XOR<AppointmentsOnDoctorsCreateWithoutDoctorInput, AppointmentsOnDoctorsUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentsOnDoctorsCreateManyDoctorInputEnvelope = {
    data: Enumerable<AppointmentsOnDoctorsCreateManyDoctorInput>
    skipDuplicates?: boolean
  }

  export type AppointmentsOnDoctorsUpsertWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentsOnDoctorsWhereUniqueInput
    update: XOR<AppointmentsOnDoctorsUpdateWithoutDoctorInput, AppointmentsOnDoctorsUncheckedUpdateWithoutDoctorInput>
    create: XOR<AppointmentsOnDoctorsCreateWithoutDoctorInput, AppointmentsOnDoctorsUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentsOnDoctorsUpdateWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentsOnDoctorsWhereUniqueInput
    data: XOR<AppointmentsOnDoctorsUpdateWithoutDoctorInput, AppointmentsOnDoctorsUncheckedUpdateWithoutDoctorInput>
  }

  export type AppointmentsOnDoctorsUpdateManyWithWhereWithoutDoctorInput = {
    where: AppointmentsOnDoctorsScalarWhereInput
    data: XOR<AppointmentsOnDoctorsUpdateManyMutationInput, AppointmentsOnDoctorsUncheckedUpdateManyWithoutAppointmentsInput>
  }

  export type AppointmentsOnDoctorsScalarWhereInput = {
    AND?: Enumerable<AppointmentsOnDoctorsScalarWhereInput>
    OR?: Enumerable<AppointmentsOnDoctorsScalarWhereInput>
    NOT?: Enumerable<AppointmentsOnDoctorsScalarWhereInput>
    appointmentId?: IntFilter | number
    doctorId?: IntFilter | number
  }

  export type AppointmentCreateWithoutPatientInput = {
    practiceName: string
    reason: string
    dateTime: Date | string
    doctors?: AppointmentsOnDoctorsCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: number
    practiceName: string
    reason: string
    dateTime: Date | string
    doctors?: AppointmentsOnDoctorsUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateManyPatientInputEnvelope = {
    data: Enumerable<AppointmentCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentsInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: Enumerable<AppointmentScalarWhereInput>
    OR?: Enumerable<AppointmentScalarWhereInput>
    NOT?: Enumerable<AppointmentScalarWhereInput>
    id?: IntFilter | number
    practiceName?: StringFilter | string
    reason?: StringFilter | string
    dateTime?: DateTimeFilter | Date | string
    patientId?: IntFilter | number
  }

  export type PatientCreateWithoutAppointmentsInput = {
    firstName: string
    lastName: string
    dateOfBirth: Date | string
  }

  export type PatientUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    firstName: string
    lastName: string
    dateOfBirth: Date | string
  }

  export type PatientCreateOrConnectWithoutAppointmentsInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
  }

  export type AppointmentsOnDoctorsCreateWithoutAppointmentInput = {
    doctor: DoctorCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentsOnDoctorsUncheckedCreateWithoutAppointmentInput = {
    doctorId: number
  }

  export type AppointmentsOnDoctorsCreateOrConnectWithoutAppointmentInput = {
    where: AppointmentsOnDoctorsWhereUniqueInput
    create: XOR<AppointmentsOnDoctorsCreateWithoutAppointmentInput, AppointmentsOnDoctorsUncheckedCreateWithoutAppointmentInput>
  }

  export type AppointmentsOnDoctorsCreateManyAppointmentInputEnvelope = {
    data: Enumerable<AppointmentsOnDoctorsCreateManyAppointmentInput>
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutAppointmentsInput = {
    update: XOR<PatientUpdateWithoutAppointmentsInput, PatientUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<PatientCreateWithoutAppointmentsInput, PatientUncheckedCreateWithoutAppointmentsInput>
  }

  export type PatientUpdateWithoutAppointmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentsOnDoctorsUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: AppointmentsOnDoctorsWhereUniqueInput
    update: XOR<AppointmentsOnDoctorsUpdateWithoutAppointmentInput, AppointmentsOnDoctorsUncheckedUpdateWithoutAppointmentInput>
    create: XOR<AppointmentsOnDoctorsCreateWithoutAppointmentInput, AppointmentsOnDoctorsUncheckedCreateWithoutAppointmentInput>
  }

  export type AppointmentsOnDoctorsUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: AppointmentsOnDoctorsWhereUniqueInput
    data: XOR<AppointmentsOnDoctorsUpdateWithoutAppointmentInput, AppointmentsOnDoctorsUncheckedUpdateWithoutAppointmentInput>
  }

  export type AppointmentsOnDoctorsUpdateManyWithWhereWithoutAppointmentInput = {
    where: AppointmentsOnDoctorsScalarWhereInput
    data: XOR<AppointmentsOnDoctorsUpdateManyMutationInput, AppointmentsOnDoctorsUncheckedUpdateManyWithoutDoctorsInput>
  }

  export type AppointmentCreateWithoutDoctorsInput = {
    practiceName: string
    reason: string
    dateTime: Date | string
    patient: PatientCreateNestedOneWithoutAppointmentsInput
  }

  export type AppointmentUncheckedCreateWithoutDoctorsInput = {
    id?: number
    practiceName: string
    reason: string
    dateTime: Date | string
    patientId: number
  }

  export type AppointmentCreateOrConnectWithoutDoctorsInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput>
  }

  export type DoctorCreateWithoutAppointmentsInput = {
    firstName: string
    lastName: string
    specialty: string
  }

  export type DoctorUncheckedCreateWithoutAppointmentsInput = {
    id?: number
    firstName: string
    lastName: string
    specialty: string
  }

  export type DoctorCreateOrConnectWithoutAppointmentsInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutAppointmentsInput, DoctorUncheckedCreateWithoutAppointmentsInput>
  }

  export type AppointmentUpsertWithoutDoctorsInput = {
    update: XOR<AppointmentUpdateWithoutDoctorsInput, AppointmentUncheckedUpdateWithoutDoctorsInput>
    create: XOR<AppointmentCreateWithoutDoctorsInput, AppointmentUncheckedCreateWithoutDoctorsInput>
  }

  export type AppointmentUpdateWithoutDoctorsInput = {
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutAppointmentsInput
  }

  export type AppointmentUncheckedUpdateWithoutDoctorsInput = {
    id?: IntFieldUpdateOperationsInput | number
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type DoctorUpsertWithoutAppointmentsInput = {
    update: XOR<DoctorUpdateWithoutAppointmentsInput, DoctorUncheckedUpdateWithoutAppointmentsInput>
    create: XOR<DoctorCreateWithoutAppointmentsInput, DoctorUncheckedCreateWithoutAppointmentsInput>
  }

  export type DoctorUpdateWithoutAppointmentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorUncheckedUpdateWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    specialty?: StringFieldUpdateOperationsInput | string
  }

  export type AppointmentsOnDoctorsCreateManyDoctorInput = {
    appointmentId: number
  }

  export type AppointmentsOnDoctorsUpdateWithoutDoctorInput = {
    appointment?: AppointmentUpdateOneRequiredWithoutDoctorsInput
  }

  export type AppointmentsOnDoctorsUncheckedUpdateWithoutDoctorInput = {
    appointmentId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsOnDoctorsUncheckedUpdateManyWithoutAppointmentsInput = {
    appointmentId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentCreateManyPatientInput = {
    id?: number
    practiceName: string
    reason: string
    dateTime: Date | string
  }

  export type AppointmentUpdateWithoutPatientInput = {
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    doctors?: AppointmentsOnDoctorsUpdateManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    doctors?: AppointmentsOnDoctorsUncheckedUpdateManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedUpdateManyWithoutAppointmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    practiceName?: StringFieldUpdateOperationsInput | string
    reason?: StringFieldUpdateOperationsInput | string
    dateTime?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentsOnDoctorsCreateManyAppointmentInput = {
    doctorId: number
  }

  export type AppointmentsOnDoctorsUpdateWithoutAppointmentInput = {
    doctor?: DoctorUpdateOneRequiredWithoutAppointmentsInput
  }

  export type AppointmentsOnDoctorsUncheckedUpdateWithoutAppointmentInput = {
    doctorId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentsOnDoctorsUncheckedUpdateManyWithoutDoctorsInput = {
    doctorId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}